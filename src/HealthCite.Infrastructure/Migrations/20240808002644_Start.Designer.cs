// <auto-generated />
using System;
using HealthCite.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthCite.Infrastructure.Migrations
{
    [DbContext(typeof(HealthCiteDbContext))]
    [Migration("20240808002644_Start")]
    partial class Start
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthCite.Domain.Entities.Citas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConsultorioId")
                        .HasColumnType("int");

                    b.Property<string>("CorroElectronico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FechaCita")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FechaNacimiento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GeneroId")
                        .HasColumnType("int");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultorioId");

                    b.HasIndex("GeneroId");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("HealthCite.Domain.Entities.Consultorios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EspecialidadId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadId");

                    b.ToTable("Consultorios");
                });

            modelBuilder.Entity("HealthCite.Domain.Entities.Doctores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConsultorioId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GeneroId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultorioId");

                    b.HasIndex("GeneroId");

                    b.ToTable("Doctores");
                });

            modelBuilder.Entity("HealthCite.Domain.Entities.Especialidades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("HealthCite.Domain.Entities.Generos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("HealthCite.Domain.Entities.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("HealthCite.Domain.Entities.Usuarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("HealthCite.Domain.Entities.Citas", b =>
                {
                    b.HasOne("HealthCite.Domain.Entities.Consultorios", "Consultorio")
                        .WithMany("Citas")
                        .HasForeignKey("ConsultorioId");

                    b.HasOne("HealthCite.Domain.Entities.Generos", "Genero")
                        .WithMany("Citas")
                        .HasForeignKey("GeneroId");

                    b.Navigation("Consultorio");

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("HealthCite.Domain.Entities.Consultorios", b =>
                {
                    b.HasOne("HealthCite.Domain.Entities.Especialidades", "Especialidad")
                        .WithMany("Consultorios")
                        .HasForeignKey("EspecialidadId");

                    b.Navigation("Especialidad");
                });

            modelBuilder.Entity("HealthCite.Domain.Entities.Doctores", b =>
                {
                    b.HasOne("HealthCite.Domain.Entities.Consultorios", "Consultorio")
                        .WithMany("Doctores")
                        .HasForeignKey("ConsultorioId");

                    b.HasOne("HealthCite.Domain.Entities.Generos", "Genero")
                        .WithMany("Doctores")
                        .HasForeignKey("GeneroId");

                    b.Navigation("Consultorio");

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("HealthCite.Domain.Entities.Usuarios", b =>
                {
                    b.HasOne("HealthCite.Domain.Entities.Roles", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("HealthCite.Domain.Entities.Consultorios", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Doctores");
                });

            modelBuilder.Entity("HealthCite.Domain.Entities.Especialidades", b =>
                {
                    b.Navigation("Consultorios");
                });

            modelBuilder.Entity("HealthCite.Domain.Entities.Generos", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Doctores");
                });

            modelBuilder.Entity("HealthCite.Domain.Entities.Roles", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
